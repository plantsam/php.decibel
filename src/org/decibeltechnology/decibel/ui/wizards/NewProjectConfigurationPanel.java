package org.decibeltechnology.decibel.ui.wizards;

import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import javax.swing.GroupLayout.Alignment;
import javax.swing.*;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.decibeltechnology.decibel.DecibelToolkit;
import org.decibeltechnology.decibel.ui.options.DecibelOptions;
import org.netbeans.api.options.OptionsDisplayer;
import org.openide.awt.Mnemonics;
import org.openide.filesystems.FileChooserBuilder;
import org.openide.filesystems.FileUtil;
import org.openide.util.ChangeSupport;
import org.openide.util.NbBundle;
import org.openide.util.Utilities;

/**
 * @author Tomas Mysik
 */
public final class NewProjectConfigurationPanel extends JPanel implements ChangeListener {

    private final ChangeSupport changeSupport = new ChangeSupport(this);

    public NewProjectConfigurationPanel() {
		
        initComponents();
		
        // work around - keep the label on the right side
        optionsLabel.setMaximumSize(optionsLabel.getPreferredSize());

//        projectUmlTextField.setText(getOptions().getDefaultParamsForProject());
//        String defaultParamsForApps = getOptions().getDefaultParamsForApps();
//        frontendParamsTextField.setText(defaultParamsForApps);
//        backendParamsTextField.setText(defaultParamsForApps);
//        otherParamsTextField.setText(defaultParamsForApps);

//        ItemListener defaultItemListener = new DefaultItemListener();
//        frontendCheckBox.addItemListener(defaultItemListener);
//        backendCheckBox.addItemListener(defaultItemListener);
//        otherCheckBox.addItemListener(defaultItemListener);

//        DocumentListener defaultDocumentListener = new DefaultDocumentListener();
//        frontendParamsTextField.getDocument().addDocumentListener(defaultDocumentListener);
//        backendParamsTextField.getDocument().addDocumentListener(defaultDocumentListener);
//        otherNameTextField.getDocument().addDocumentListener(defaultDocumentListener);
//        otherParamsTextField.getDocument().addDocumentListener(defaultDocumentListener);

        generateProjectLabel.addPropertyChangeListener("enabled", new PropertyChangeListener() { // NOI18N
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                enableOptionsLabel();
            }
        });
        enableOptionsLabel();
    }

    @Override
    public void addNotify() {
        DecibelOptions.getInstance().addChangeListener(this);
        super.addNotify();
    }

    @Override
    public void removeNotify() {
        DecibelOptions.getInstance().removeChangeListener(this);
        super.removeNotify();
    }

    public void addChangeListener(ChangeListener listener) {
        changeSupport.addChangeListener(listener);
    }

    public void removeChangeListener(ChangeListener listener) {
        changeSupport.removeChangeListener(listener);
    }

    public String[] getProjectParams() {
        return Utilities.parseParameters(projectUmlTextField.getText().trim());
    }

    public String getErrorMessage() {
        return null;
    }

    public String getWarningMessage() {
        return null;
    }

    void fireChange() {
        changeSupport.fireChange();
    }

    void enableOptionsLabel() {
        optionsLabel.setVisible(generateProjectLabel.isEnabled());
    }

    private DecibelOptions getOptions() {
        return DecibelOptions.getInstance();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        generateProjectLabel = new JLabel();
        optionsLabel = new JLabel();
        projectUmlLabel = new JLabel();
        projectUmlTextField = new JTextField();
        projectUmlBrowseButton = new JButton();
        clientNameLabel = new JLabel();
        clientNameTextField = new JTextField();

        Mnemonics.setLocalizedText(generateProjectLabel, NbBundle.getMessage(NewProjectConfigurationPanel.class, "NewProjectConfigurationPanel.generateProjectLabel.text")); // NOI18N

        optionsLabel.setLabelFor(this);
        Mnemonics.setLocalizedText(optionsLabel, NbBundle.getMessage(NewProjectConfigurationPanel.class, "NewProjectConfigurationPanel.optionsLabel.text")); // NOI18N
		optionsLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                optionsLabelMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                optionsLabelMousePressed(evt);
            }
        });
        optionsLabel.setToolTipText(NbBundle.getMessage(NewProjectConfigurationPanel.class, "NewProjectConfigurationPanel.optionsLabel.toolTipText"));         optionsLabel.addMouseListener(new MouseAdapter() {
            public void mouseEntered(MouseEvent evt) {
                optionsLabelMouseEntered(evt);
            }
            public void mousePressed(MouseEvent evt) {
                optionsLabelMousePressed(evt);
            }
        });

        projectUmlLabel.setLabelFor(projectUmlTextField);
		Mnemonics.setLocalizedText(projectUmlLabel, NbBundle.getMessage(NewProjectConfigurationPanel.class, "NewProjectConfigurationPanel.projectUmlLabel.text")); // NOI18N
		Mnemonics.setLocalizedText(projectUmlBrowseButton, NbBundle.getMessage(NewProjectConfigurationPanel.class, "NewProjectConfigurationPanel.browseButton.text")); // NOI18N
        projectUmlBrowseButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                projectUmlBrowseButtonActionPerformed(evt);
            }
        });
		Mnemonics.setLocalizedText(clientNameLabel, NbBundle.getMessage(NewProjectConfigurationPanel.class, "NewProjectConfigurationPanel.clientNameLabel.text")); // NOI18N

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(generateProjectLabel)
                .addPreferredGap(ComponentPlacement.RELATED, 266, Short.MAX_VALUE)
                .addComponent(optionsLabel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                    .addComponent(clientNameLabel)
                    .addComponent(projectUmlLabel))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(projectUmlTextField, GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                    .addComponent(clientNameTextField))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(projectUmlBrowseButton))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(generateProjectLabel)
                    .addComponent(optionsLabel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(projectUmlTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(projectUmlLabel)
                    .addComponent(projectUmlBrowseButton))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(clientNameTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(clientNameLabel))
                .addGap(0, 9, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
	
    private void optionsLabelMouseEntered(MouseEvent evt) {                                          
        evt.getComponent().setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }                                         

    private void optionsLabelMousePressed(MouseEvent evt) {//GEN-FIRST:event_optionsLabelMousePressed
        OptionsDisplayer.getDefault().open(DecibelToolkit.getOptionsPath());
    }//GEN-LAST:event_optionsLabelMousePressed

	private void projectUmlBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectUmlBrowseButtonActionPerformed
        File projectUml = new FileChooserBuilder(NewProjectConfigurationPanel.class.getName())
                .setTitle(NbBundle.getMessage(NewProjectConfigurationPanel.class, "LBL_SelectProjectUml"))
                .setFilesOnly(true)
				.setFileFilter(new ProjectUmlFileFilter())
                .showOpenDialog();
        if (projectUml != null) {
            projectUml = FileUtil.normalizeFile(projectUml);
            projectUmlTextField.setText(projectUml.getAbsolutePath());
        }
	}//GEN-LAST:event_projectUmlBrowseButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel clientNameLabel;
    private JTextField clientNameTextField;
    private JLabel generateProjectLabel;
    private JLabel optionsLabel;
    private JButton projectUmlBrowseButton;
    private JLabel projectUmlLabel;
    private JTextField projectUmlTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void stateChanged(ChangeEvent e) {
        fireChange();
    }
}
